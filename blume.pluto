local file = arg[1] or "index.blume"
local code = io.contents(file)
if not code then
    local err = "Failed to load "..file
    if not arg[1] then
        err ..= "\nNote: No argument was given, so index.blume was assumed."
    end
    print(err)
    os.exit(1)
end

-- 0x00 iov struct
-- 0x08 nwritten
local heap = 0x0C
local data_sections = ""

-- implement str.ptr mnemonic
code = (code:gsub([[%(?str%.ptr%s+"(.-)"%)?]], function(match)
    local parsed_match = match:gsub("\\n", "\n"):gsub("\\r", "\r"):gsub("\\t", "\t")
    local len = string.len(parsed_match)
    local ptr = heap
    heap += len + 1
    data_sections ..= "\n\t(data (i32.const "..ptr..") \""..match.."\")"
    return "(i32.const "..ptr..")"
end))

-- implement str.len mnemonic
code = (code:gsub([[%(?str%.len%s+"(.-)"%)?]], function(match)
    local parsed_match = match:gsub("\\n", "\n"):gsub("\\r", "\r"):gsub("\\t", "\t")
    local len = string.len(parsed_match)
    return "(i32.const "..len..")"
end))

-- implement str.ptrandlen mnemonic
code = (code:gsub([[%(?str%.ptrandlen%s+"(.-)"%)?]], function(match)
    local parsed_match = match:gsub("\\n", "\n"):gsub("\\r", "\r"):gsub("\\t", "\t")
    local len = string.len(parsed_match)
    local ptr = heap
    heap += len + 1
    data_sections ..= "\n\t(data (i32.const "..ptr..") \""..match.."\")"
    return "(i32.const "..ptr..") (i32.const "..len..")"
end))

-- implement write_to_stdout function
if code:find("$write_to_stdout", 1, true) then
code = code:gsub("%(module", [[(module
    (func $write_to_stdout (param $str i32) (param $len i32)
        (i32.store
            (i32.const 0) ;; iov.iov_base
            (local.get $str)
            )
        (i32.store
            (i32.const 4) ;; iov.iov_len
            (local.get $len)
            )
        (drop
            (call $wasi_snapshot_preview1.fd_write
                (i32.const 1) ;; stdout
                (i32.const 0) ;; iovs
                (i32.const 1) ;; iovs_len
                (i32.const 0) ;; out_nwritten
                )
            )
        )]])
end

-- implement strlen function (https://github.com/calamity-inc/blume-libc)
if code:find("$blume.strlen", 1, true) then
code = code:gsub("%(module", [[(module
    (func $blume.strlen (param $0 i32) (result i32)
        (local $1 i32)
        loop $while-continue|0
            local.get $0
            i32.load8_u
            if
                local.get $0
                i32.const 1
                i32.add
                local.set $0
                local.get $1
                i32.const 1
                i32.add
                local.set $1
                br $while-continue|0
            end
        end
        local.get $1
        )]])
end

-- implement streq function (https://github.com/calamity-inc/blume-libc)
if code:find("$blume.streq", 1, true) then
code = code:gsub("%(module", [[(module
    (func $blume.streq (param $0 i32) (param $1 i32) (result i32) ;; returns 1 if equal
        (local $2 i32)
        (local $3 i32)
        loop $while-continue|0
            local.get $0
            local.tee $3
            i32.const 1
            i32.add
            local.set $0
            local.get $1
            local.tee $2
            i32.const 1
            i32.add
            local.set $1
            local.get $3
            i32.load8_u
            local.tee $3
            local.get $2
            i32.load8_u
            i32.ne
            if
                i32.const 0
                return
            end
            local.get $3
            br_if $while-continue|0
        end
        i32.const 1
        )]])
end

-- implement strstr function (https://github.com/calamity-inc/blume-libc)
if code:find("$blume.strstr", 1, true) then
code = code:gsub("%(module", [[(module
    (func $blume.strstr (param $haystack i32) (param $needle i32) (result i32) ;; returns a pointer relative to haystack if needle is found, 0 otherwise
        (local $2 i32)
        (local $3 i32)
        local.get $needle
        i32.load8_u
        i32.eqz
        if
            local.get $haystack
            return
        end
        loop $while-continue|0
            local.get $haystack
            i32.load8_u
            local.tee $2
            if
                local.get $2
                local.get $needle
                i32.load8_u
                i32.eq
                if
                    local.get $needle
                    local.set $2
                    local.get $haystack
                    local.set $3
                    loop $while-continue|1
                        local.get $2
                        i32.load8_u
                        i32.eqz
                        if
                            local.get $haystack
                            return
                        end
                        local.get $3
                        i32.load8_u
                        local.get $2
                        i32.load8_u
                        i32.eq
                        if
                            local.get $2
                            i32.const 1
                            i32.add
                            local.set $2
                            local.get $3
                            i32.const 1
                            i32.add
                            local.set $3
                            br $while-continue|1
                        end
                    end
                end
                local.get $haystack
                i32.const 1
                i32.add
                local.set $haystack
                br $while-continue|0
            end
        end
        i32.const 0
        )]])
end

-- emit memory
if data_sections ~= "" then
if code:find("$wasi_snapshot_preview1.", 1, true) then
code = code:gsub("%(module", [[(module
    (memory (export "memory") 1) ;; needs to be exported for WASI]]..data_sections)
else
code = code:gsub("%(module", [[(module
    (memory 1)]]..data_sections)
end
end

-- emit imports
if code:find("$wasi_snapshot_preview1.fd_write", 1, true) then
code = code:gsub("%(module", [[(module
    (import "wasi_snapshot_preview1" "fd_write" (func $wasi_snapshot_preview1.fd_write (param i32 i32 i32 i32) (result i32)))]])
end

io.contents(file..".wat", code)
print("Generated "..file..".wat")
print("To convert it to WASM, run: wat2wasm "..file..".wat")
